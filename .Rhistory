setwd("~/BoxSync/GeneTank/PhenotypeBasedPrediction")
DNet=read.table('~/BoxSync/GeneTank/Datasets/ZhaoData/ncomms5212-s4.txt')
DNet=read.csv('~/BoxSync/GeneTank/Datasets/ZhaoData/disease_disease.csv')
head(DNet)
save(DNet,'DiseaseNetZhao2014.Rdata')
save(DNet,file = 'DiseaseNetZhao2014.Rdata')
DNet=read.csv('~/BoxSync/GeneTank/Datasets/ZhaoData/disease_disease.csv')
head(DNet)
library(stringdist)
PatientsLikeMe=read.csv(file = 'PatientsLikeMe.csv',header = T)
head(PatientsLikeMe)
AllTrait2=tolower(as.character(PatientsLikeMe$Phenotype_Name))
head(AllTrait2)
Output=mapply(1:length(DNet$MeSH.Disease.Term),FUN = function(x){which.min(stringdist(DNet$MeSH.Disease.Term[x],AllTrait2, method="jw"))})
nrow(DNet)
length(unique(DNet$MeSH.Disease.Term))
AllTrait=uniquec(c(DNet$MeSH.Disease.Term,DNet$MeSH.Disease.Term.1))
AllTrait=unique(c(DNet$MeSH.Disease.Term,DNet$MeSH.Disease.Term.1))
AllTrait
NameMatching=mapply(1:length(AllTrait),FUN = function(x){which.min(stringdist(AllTrait,AllTrait2, method="jw"))})
NameMatching
NameMatching=mapply(1:length(AllTrait),FUN = function(x){which.min(stringdist(AllTrait[x],AllTrait2, method="jw"))})
NameMatching
NameMatching=AllTrait2[mapply(1:length(AllTrait),FUN = function(x){which.min(stringdist(AllTrait[x],AllTrait2, method="jw"))})]
NameMatching
AllTrait2
AllTrait
NameMatching=data.frame(NetName=AllTrait,PatientLikeMeName=AllTrait2)
length(AllTrait)
NameMatching=AllTrait2[mapply(1:length(AllTrait),FUN = function(x){which.min(stringdist(AllTrait[x],AllTrait2, method="jw"))})]
NameMatching=data.frame(NetName=AllTrait,PatientLikeMeName=NameMatching)
head(NameMatching)
NameMatching=data.frame(NetName=as.character(AllTrait),PatientLikeMeName=NameMatching)
NameMatching=AllTrait2[mapply(1:length(AllTrait),FUN = function(x){which.min(stringdist(AllTrait[x],AllTrait2, method="jw"))})]
NameMatching=data.frame(NetName=as.character(AllTrait),PatientLikeMeName=NameMatching)
head(NameMatching)
AllTrait
AllTrait=unique(c(as.character(DNet$MeSH.Disease.Term),as.character(DNet$MeSH.Disease.Term.1)))
NameMatching=AllTrait2[mapply(1:length(AllTrait),FUN = function(x){which.min(stringdist(AllTrait[x],AllTrait2, method="jw"))})]
NameMatching=data.frame(NetName=as.character(AllTrait),PatientLikeMeName=NameMatching)
head(NameMatching)
DNet$Disease1=NameMatching$PatientLikeMeName[match(DNet$MeSH.Disease.Term,NameMatching$NetName)]
DNet$Disease2=NameMatching$PatientLikeMeName[match(DNet$MeSH.Disease.Term1,NameMatching$NetName)]
DNet$Disease2=NameMatching$PatientLikeMeName[match(DNet$MeSH.Disease.Term.1,NameMatching$NetName)]
DNet$Disease1=NameMatching$PatientLikeMeName[match(DNet$MeSH.Disease.Term,NameMatching$NetName)]
DNet$Disease2=NameMatching$PatientLikeMeName[match(DNet$MeSH.Disease.Term.1,NameMatching$NetName)]
head(DNet)
DNet=DNet[,c(3,4,5)]
save(DNet,file = 'DiseaseNetZhao2014.Rdata')
X=load('DiseaseNetZhao2014.Rdata')
DNet=get(X)
head(DNet)
Phenotype=c('Age','Gender','ZipCode','EthnicGroup')
Phenotype=c('Age','Gender','ZipCode','EthnicGroup',sample(DNet$Disease1,20))
Phenotype
DNet$Disease1
Phenotype=c('Age','Gender','ZipCode','EthnicGroup',sample(as.charater(DNet$Disease1),20))
Phenotype=c('Age','Gender','ZipCode','EthnicGroup',sample(as.character(DNet$Disease1),20))
Phenotype
Value=c('60','M','02139','MA','USA','Alien',sample(c(0,1),20,replace = T))
Phenotype=c('Age','Gender','ZipCode',"State/District",'Country','EthnicGroup',sample(as.character(DNet$Disease1),20))
Value=c('60','M','02139','MA','USA','Alien',sample(c(0,1),20,replace = T))
Value
PatientData=data.frame(Phenotype,Value)
head(PatientData)
write.csv(Phenotype,file = 'Paitent_00007.csv')
write.csv(Phenotype,file = 'Paitent_7.csv')
Address='./Paitent_00007.csv'
PatientData=read.csv(Address)
head(PatientData)
PatientData=data.frame(Phenotype,Value)
head(PatientData)
write.csv(Phenotype,file = 'Paitent_7.csv')
Address='./Paitent_7.csv'
PatientData=read.csv(Address)
head(PatientData)
head(PatientData)
write.csv(PatientData,file = 'Paitent_7.csv')
Address='./Paitent_7.csv'
PatientData=read.csv(Address)
head(PatientData)
write.csv(PatientData,file = 'Paitent_7.csv')
Address='./Paitent_7.csv'
head(PatientData)
PatientData=data.frame(Phenotype,Value)
head(PatientData)
write.csv(PatientData,file = 'Paitent_7.csv')
Address='./Paitent_7.csv'
PatientData=read.csv(Address)
head(PatientData)
X=load('DiseaseNetZhao2014.Rdata')
DNet=get(X)
AllPhenotype=unique(c(as.character(DNet$Disease1),as.character(DNet$Disease2)))
AllPhenotype
Target=PatientData[PatientData$Phenotype%in%AllPhenotype,]
head(Target)
Target=Target[Target$Value==1,]
head(Target)
Predicted=unique(c(DNet$Disease2[DNet$Disease1%in%Target$Phenotype],DNet$Disease1[DNet$Disease2%in%Target$Phenotype]))
Predicted
Predicted=unique(c(as.character(DNet$Disease2[DNet$Disease1%in%Target$Phenotype]),
as.character(DNet$Disease1[DNet$Disease2%in%Target$Phenotype])))
Predicted
Predicted=Predicted[!Predicted%in%Target$Phenotype]
Predicted
Report=Target
Report
Report$type='Reported'
Predicted
head(Report)
Report=Report[,-1]
head(Report)
rownames(Report)
rownames(Report)=NULL
head(Report)
rbind(Report,data.frame({Phenotype=Predicted,Value=1,type='Predicted'})
rbind(Report,data.frame({Phenotype=Predicted,Value=1,type='Predicted'}))
rbind(Report,data.frame(Phenotype=Predicted,Value=1,type='Predicted'))
Report=rbind(Report,data.frame(Phenotype=Predicted,Value=1,type='Predicted'))
PatientNumber=7
write.csv(Report,file = paste0('PhenoPre_report_patient_',PatientNumber,'.csv'))
system('ls')
setwd("~/BoxSync/GeneTank/IntegratedPipeline")
system("ls")
paste("./23andme/23andmeVersionBuild.py", InputAddress)
InputAddress='/Users/dliu/BoxSync/GeneTank/Datasets/OpenSNPs/6285.23andme.4779.zip'
paste("./23andme/23andmeVersionBuild.py", InputAddress)
system(paste("./23andme/23andmeVersionBuild.py", InputAddress))
setwd("~/BoxSync/GeneTank/IntegratedPipeline")
paste("./23andme/23andmeVersionBuild.py", InputAddress)
system(paste("python ./23andme/23andmeVersionBuild.py", InputAddress))
system(paste("python ./23andme/23andmeVersionBuild.py", InputAddress))
print('version detected')
OutputAdress="/Users/dliu/BoxSync/GeneTank/GWAS_results_predictions/Output/VCF/"
OutputAdress="/Users/dliu/BoxSync/GeneTank/GWAS_results_predictions/Output/VCF/"
ReferenceAdress="./reference/"
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover.py", InputAddress,ReferenceAdress,OutputAdress))
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover.py", InputAddress,ReferenceAdress,OutputAdress))
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover.py", InputAddress,OutputAdress))
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
InputAddress='/Users/dliu/BoxSync/GeneTank/Datasets/OpenSNPs/6285.23andme.4779.zip'
OutputAddress="/Users/dliu/BoxSync/GeneTank/GWAS_results_predictions/Output/VCF/"
ReferenceAddress="./reference/"
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
OutputAddress="/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/"
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
print('lifted over and coverted to CVF')
InputAddress='/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeInputData/6308.23andme.4810.zip'
OutputAddress=paste0("/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/","Patient_",PatientID)
PatientID="08"
OutputAddress=paste0("/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/","Patient_",PatientID)
ReferenceAddress="./reference/"
system(paste("python ./23andme/23andmeVersionBuild.py", InputAddress))
print('version detected')
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
print('lifted over and coverted to CVF')
PatientID="08"
InputAddress='/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeInputData/6308.23andme.4810.zip'
OutputAddress=paste0("/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/","Patient_",PatientID,'_')
ReferenceAddress="./reference/"
system(paste("python ./23andme/23andmeVersionBuild.py", InputAddress))
print('version detected')
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
print('lifted over and coverted to CVF')
OutputAddress
OutputAddress
OutputAddress
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
print('lifted over and coverted to CVF')
PatientID="08"
InputAddress='/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeInputData/6308.23andme.4810.zip'
OutputAddress=paste0("/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/","Patient_",PatientID,)
ReferenceAddress="./reference/"
PatientID="08"
InputAddress='/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeInputData/6308.23andme.4810.zip'
OutputAddress=paste0("/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/","Patient_",PatientID)
ReferenceAddress="./reference/"
system(paste("python ./23andme/23andmeVersionBuild.py", InputAddress))
print('version detected')
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
print('lifted over and coverted to CVF')
OutputAddress
list.files(OutputAddress)
grepl(pattern = '.cvf',list.files(OutputAddress))
grepl(pattern = '.vcf',list.files(OutputAddress))
list.files(OutputAddress)[grepl(pattern = '.vcf',list.files(OutputAddress))]
paste0(OutputAddress,list.files(OutputAddress)[grepl(pattern = '.vcf',list.files(OutputAddress))])
VCF=paste0(OutputAddress,list.files(OutputAddress)[grepl(pattern = '.vcf',list.files(OutputAddress))])
Target=readVcf(VCF,"hg19")
library("VariantAnnotation") #load the package
Target=readVcf(VCF,"hg19")
VCF
VCF=paste0(OutputAddress,'/',list.files(OutputAddress)[grepl(pattern = '.vcf',list.files(OutputAddress))])
Target=readVcf(VCF,"hg19")
geno(Target)
geno(header(Target))
#header information
header(Target)
samples(header(Target))
geno(header(Target))
#Genomic position
head(rowRanges(Target),3)
ref(Target)[1:5]
alt(Target)[1:5]
qual(Target)[1:5]
#Genotype
geno(Target)
sapply(geno(Target),class)
geno(header(Target))["DS",]
#DS <-geno(Target)$DS
#dim(DS)
GT <-geno(Target)$GT
GT[1:3,]
length(GT)
GTvariants=unlist(lapply(strsplit(GT,'[/]'),FUN = function(x){sum(as.integer(x))}))
length(GTvariants)
head(GTvariants)
names(GTvariants)=rownames(GT)
#Get the GWAS informaiton
GWAScatalog=read.csv('~/BoxSync/GeneTank/Datasets/GWAScatalog/GWASCatalogLinkedToPNMe.csv')
head(GWAScatalog)
names(GWAScatalog)
GWASsubInfor=GWAScatalog[,c('PatientLikeMeName',"SNPS")]
head(GWASsubInfor)
#matching , 3 situation, mathcing >0, matching =0, non-matching
DiseaseReport=GWASsubInfor
DiseaseReport$Risk='Unknown'
DiseaseReport=DiseaseReport[!is.na(DiseaseReport$PatientLikeMeName),]
head(DiseaseReport)
nrow(DiseaseReport)
VecScore=GTvariants[as.character(DiseaseReport$SNPS)]
DiseaseReport$Risk[which(VecScore>0)]='Positive'
DiseaseReport$Risk[which(VecScore==0)]='Negative'
sum(DiseaseReport$Risk=='Positive')
sum(DiseaseReport$Risk=='Negative')
sum(DiseaseReport$Risk=='Unknown')
#Aggregate the results
DiseaseReport=split(DiseaseReport,f = DiseaseReport$PatientLikeMeName)
length(DiseaseReport)
GetType=function(x){
AllTypes=unique(x$Risk)
x$PatientLikeMeName=as.character(x$PatientLikeMeName)
if("Positive"%in%AllTypes){return(c(PhenotypeName=x$PatientLikeMeName[1],Risk='Positive'))}
if((!"Positive"%in%AllTypes)&("Negative"%in%AllTypes)){return(c(PhenotypeName=x$PatientLikeMeName[1],Risk='Negative'))}
if((AllTypes=='Unknown')){return(c(PhenotypeName=x$PatientLikeMeName[1],Risk='Unknown'))}
}
DiseaseReport=lapply(DiseaseReport,FUN = GetType)
DiseaseReport=Reduce(DiseaseReport,f = rbind)
rownames(DiseaseReport)=NULL
DiseaseReport=as.data.frame(DiseaseReport)
head(DiseaseReport)
sum(DiseaseReport$Risk=='Unknown')
OutputAddress
tail(DiseaseReport)
write.csv(OutputAddress,file = 'GeneticPhenotypeReport.csv')
OutputAddress
paste0(OutputAddress,'GeneticPhenotypeReport,','Patient_',PatientID,'.csv')
paste0(OutputAddress,'/GeneticPhenotypeReport,','Patient_',PatientID,'.csv')
paste0(OutputAddress,'/GeneticPhenotypeReport_','Patient_',PatientID,'.csv')
write.csv(DiseaseReport,file = paste0(OutputAddress,'/GeneticPhenotypeReport_','Patient_',PatientID,'.csv'))
library("VariantAnnotation") #load the package
#Generate CSF files based on 23andMe data
PatientID="08"
InputAddress='/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeInputData/6308.23andme.4810.zip'
OutputAddress=paste0("/Users/dliu/BoxSync/GeneTank/IntegratedPipeline/FakeOutput/","Patient_",PatientID)
ReferenceAddress="./reference/"
system(paste("python ./23andme/23andmeVersionBuild.py", InputAddress))
print('version detected')
system(paste("python ./23andme/23andmeVersionBuild_convert_liftover2.py", InputAddress,OutputAddress,ReferenceAddress))
print('lifted over and coverted to CVF')
#read vcf
VCF=paste0(OutputAddress,'/',list.files(OutputAddress)[grepl(pattern = '.vcf',list.files(OutputAddress))])
Target=readVcf(VCF,"hg19")
#geno(Target)
#geno(header(Target))
#header information
#header(Target)
#samples(header(Target))
#geno(header(Target))
#Genomic position
#head(rowRanges(Target),3)
#ref(Target)[1:5]
#alt(Target)[1:5]
#qual(Target)[1:5]
#Genotype
#geno(Target)
#sapply(geno(Target),class)
#geno(header(Target))["DS",]
#DS <-geno(Target)$DS
#dim(DS)
GT <-geno(Target)$GT
#GT[1:3,]
#length(GT)
GTvariants=unlist(lapply(strsplit(GT,'[/]'),FUN = function(x){sum(as.integer(x))}))
#length(GTvariants)
#head(GTvariants)
names(GTvariants)=rownames(GT)
#Get the GWAS informaiton
GWAScatalog=read.csv('~/BoxSync/GeneTank/Datasets/GWAScatalog/GWASCatalogLinkedToPNMe.csv')
#head(GWAScatalog)
#names(GWAScatalog)
GWASsubInfor=GWAScatalog[,c('PatientLikeMeName',"SNPS")]
#head(GWASsubInfor)
#matching , 3 situation, mathcing >0, matching =0, non-matching
DiseaseReport=GWASsubInfor
DiseaseReport$Risk='Unknown'
DiseaseReport=DiseaseReport[!is.na(DiseaseReport$PatientLikeMeName),]
#head(DiseaseReport)
#nrow(DiseaseReport)
VecScore=GTvariants[as.character(DiseaseReport$SNPS)]
DiseaseReport$Risk[which(VecScore>0)]='Positive'
DiseaseReport$Risk[which(VecScore==0)]='Negative'
#sum(DiseaseReport$Risk=='Positive')
#sum(DiseaseReport$Risk=='Negative')
#sum(DiseaseReport$Risk=='Unknown')
#Aggregate the results
DiseaseReport=split(DiseaseReport,f = DiseaseReport$PatientLikeMeName)
#length(DiseaseReport)
GetType=function(x){
AllTypes=unique(x$Risk)
x$PatientLikeMeName=as.character(x$PatientLikeMeName)
if("Positive"%in%AllTypes){return(c(PhenotypeName=x$PatientLikeMeName[1],Risk='Positive'))}
if((!"Positive"%in%AllTypes)&("Negative"%in%AllTypes)){return(c(PhenotypeName=x$PatientLikeMeName[1],Risk='Negative'))}
if((AllTypes=='Unknown')){return(c(PhenotypeName=x$PatientLikeMeName[1],Risk='Unknown'))}
}
DiseaseReport=lapply(DiseaseReport,FUN = GetType)
DiseaseReport=Reduce(DiseaseReport,f = rbind)
rownames(DiseaseReport)=NULL
DiseaseReport=as.data.frame(DiseaseReport)
#head(DiseaseReport)
#sum(DiseaseReport$Risk=='Unknown')
#tail(DiseaseReport)
write.csv(DiseaseReport,file = paste0(OutputAddress,'/GeneticPhenotypeReport_','Patient_',PatientID,'.csv'))
require(VariantAnnotation)
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
require("VariantAnnotation",character.only = TRUE)
require("VariantAnnotation",character.only = TRUE))
!require("VariantAnnotation",character.only = TRUE)
!require("VariantAnnotation",character.only = TRUE)
if (!require("VariantAnnotation",character.only = TRUE))
{
source("http://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation")
if(!require("VariantAnnotation",character.only = TRUE)) stop("Package not found")
}
OutputAddress=paste0(OutputAddress,"Patient_",PatientID)
PatientID=as.character(commandArgs(trailingOnly = T)[[1]][1])
InputAddress=as.character(commandArgs(trailingOnly = T)[[2]][1])
OutputAddress=as.character(commandArgs(trailingOnly = T)[[3]][1])
OutputAddress=paste0(OutputAddress,"Patient_",PatientID)
ReferenceAddress="./reference/"
biocLite("ensemblVEP")
source("http://bioconductor.org/biocLite.R")
biocLite("ensemblVEP")
library(ensemblVEP)
VEP=ensemblVEP(VCF,param = VEPParam(dataformat = c(vcf=TRUE)))
VCF
VCF
VEP=ensemblVEP(VCF)
myparam <- VEPParam(dataformat=c(vcf=TRUE))
myparam <- VEPParam(dataformat=c(vcf=TRUE))
myparam <- VEPParam(dataformat=c(vcf=TRUE))
myparam <- VEPParam(dataformat=c(vcf=TRUE))
library(ensemblVEP)
